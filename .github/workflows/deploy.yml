name: Deploy foodgraphica

on:
  push:
    branches: [ deploy/prod ]
  pull_request:
    branches: [ deploy/prod ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test application
        run: |
          python manage.py check

      - name: Build Docker image
        run: |
          docker build -t foodgraphica:${{ github.sha }} .
          docker tag foodgraphica:${{ github.sha }} foodgraphica:latest

      - name: Save Docker image
        run: |
          docker save foodgraphica:latest | gzip > foodgraphica.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: foodgraphica.tar.gz
          retention-days: 1

  deploy:
    needs: build
    runs-on: self-hosted
    if: github.ref == 'refs/heads/deploy/prod'
    
    steps:
      - uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          docker load < foodgraphica.tar.gz

      - name: Debug - Check current directory and files
        run: |
          echo "현재 작업 디렉터리: $(pwd)"
          echo "현재 디렉터리 파일 목록:"
          ls -la
          echo "env 관련 파일 검색:"
          find . -name "*env*" -type f || true

      - name: Create .env file if not exists
        run: |
          if [ ! -f .env ]; then
            if [ -f .env.example ]; then
              cp .env.example .env
              echo "✅ .env 파일이 .env.example에서 생성되었습니다"
              echo "생성된 .env 파일 내용:"
              cat .env
            else
              echo "❌ .env.example 파일을 찾을 수 없습니다"
              exit 1
            fi
          else
            echo "✅ .env 파일이 이미 존재합니다"
            echo "기존 .env 파일 내용:"
            cat .env
          fi

      - name: Stop existing container
        run: |
          docker-compose down || true

      - name: Start new container
        run: |
          docker-compose up -d

      - name: Health check
        run: |
          sleep 10
          curl -f http://127.0.0.1:8000/ || exit 1
          echo "✅ Application is running successfully"

      - name: Cleanup old images
        run: |
          docker image prune -af